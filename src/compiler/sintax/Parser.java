
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintax;

import java.util.*;
import java_cup.runtime.*;
import compiler.sintax.symbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\016\000\002\005\006" +
    "\000\002\006\004\000\002\006\002\000\002\007\004\000" +
    "\002\007\002\000\002\010\007\000\002\011\003\000\002" +
    "\011\002\000\002\012\007\000\002\012\005\000\002\013" +
    "\003\000\002\013\002\000\002\014\005\000\002\014\003" +
    "\000\002\015\004\000\002\015\002\000\002\016\006\000" +
    "\002\016\013\000\002\016\012\000\002\016\006\000\002" +
    "\016\004\000\002\017\007\000\002\017\002\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\004\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\012\002\ufff8\004\ufff8\043\ufff8\044\ufff8\001" +
    "\002\000\004\002\165\001\002\000\012\002\ufffe\004\ufffe" +
    "\043\006\044\010\001\002\000\004\046\uffcf\001\002\000" +
    "\004\046\015\001\002\000\004\046\uffce\001\002\000\006" +
    "\002\001\004\014\001\002\000\024\002\ufff9\004\ufff9\015" +
    "\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\001\002\000\006\002\uffff\004\uffff\001\002\000\004\046" +
    "\015\001\002\000\050\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\001\002\000\004\012\017\001\002\000" +
    "\006\013\ufff5\046\015\001\002\000\004\016\157\001\002" +
    "\000\004\013\033\001\002\000\006\013\ufff6\017\023\001" +
    "\002\000\004\046\015\001\002\000\004\016\025\001\002" +
    "\000\012\034\032\035\026\036\031\037\030\001\002\000" +
    "\010\013\uffcc\014\uffcc\017\uffcc\001\002\000\006\013\ufff4" +
    "\017\ufff4\001\002\000\010\013\uffca\014\uffca\017\uffca\001" +
    "\002\000\010\013\uffcb\014\uffcb\017\uffcb\001\002\000\010" +
    "\013\uffcd\014\uffcd\017\uffcd\001\002\000\004\016\034\001" +
    "\002\000\012\034\032\035\026\036\031\037\030\001\002" +
    "\000\004\014\036\001\002\000\020\015\ufff8\040\ufff8\041" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000\020" +
    "\015\uffed\040\uffed\041\uffed\043\006\044\010\045\uffed\046" +
    "\uffed\001\002\000\014\015\ufffa\040\046\041\047\045\044" +
    "\046\015\001\002\000\004\015\156\001\002\000\004\017" +
    "\155\001\002\000\006\011\141\012\140\001\002\000\016" +
    "\012\065\032\056\033\057\046\015\047\051\050\054\001" +
    "\002\000\014\015\uffee\040\uffee\041\uffee\045\uffee\046\uffee" +
    "\001\002\000\004\012\130\001\002\000\004\012\050\001" +
    "\002\000\020\012\065\023\063\032\056\033\057\046\015" +
    "\047\051\050\054\001\002\000\042\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\001\002\000\036\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\013\uffde\017\uffde\021\uffde\022\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\001\002\000\032\005\116" +
    "\006\114\013\uffe2\017\uffe2\021\uffe2\022\uffe2\024\124\025" +
    "\115\026\122\027\117\030\121\031\120\001\002\000\042" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\001\002\000\042\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\001\002\000\042\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\001\002\000\042\005\uffc4\006\uffc4\007\uffc4\010\uffc4\013" +
    "\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\001\002\000" +
    "\010\013\101\021\070\022\072\001\002\000\036\005\uffe0" +
    "\006\uffe0\007\077\010\076\013\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\001\002\000\036\005\uffdc\006\uffdc\007\uffdc\010\uffdc\013" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\001\002\000\020\012\065\023" +
    "\063\032\056\033\057\046\015\047\051\050\054\001\002" +
    "\000\012\013\uffe4\017\uffe4\021\uffe4\022\uffe4\001\002\000" +
    "\020\012\065\023\063\032\056\033\057\046\015\047\051" +
    "\050\054\001\002\000\010\013\067\021\070\022\072\001" +
    "\002\000\042\005\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9" +
    "\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\001\002\000\020" +
    "\012\uffd6\023\uffd6\032\uffd6\033\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\001\002\000\020\012\065\023\063\032\056\033\057" +
    "\046\015\047\051\050\054\001\002\000\020\012\uffd7\023" +
    "\uffd7\032\uffd7\033\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002" +
    "\000\012\013\uffe5\017\uffe5\021\uffe5\022\uffe5\001\002\000" +
    "\036\005\uffdd\006\uffdd\007\uffdd\010\uffdd\013\uffdd\017\uffdd" +
    "\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\001\002\000\020\012\065\023\063\032\056" +
    "\033\057\046\015\047\051\050\054\001\002\000\020\012" +
    "\uffd8\023\uffd8\032\uffd8\033\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\001\002\000\020\012\uffd9\023\uffd9\032\uffd9\033\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\001\002\000\036\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\013\uffdf\017\uffdf\021\uffdf\022\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002" +
    "\000\004\014\102\001\002\000\016\015\ufff8\040\ufff8\041" +
    "\ufff8\043\ufff8\044\ufff8\046\ufff8\001\002\000\016\015\uffed" +
    "\040\uffed\041\uffed\043\006\044\010\046\uffed\001\002\000" +
    "\012\015\105\040\046\041\047\046\015\001\002\000\016" +
    "\015\uffe6\040\uffe6\041\uffe6\042\106\045\uffe6\046\uffe6\001" +
    "\002\000\004\014\110\001\002\000\014\015\uffeb\040\uffeb" +
    "\041\uffeb\045\uffeb\046\uffeb\001\002\000\016\015\ufff8\040" +
    "\ufff8\041\ufff8\043\ufff8\044\ufff8\046\ufff8\001\002\000\016" +
    "\015\uffed\040\uffed\041\uffed\043\006\044\010\046\uffed\001" +
    "\002\000\012\015\113\040\046\041\047\046\015\001\002" +
    "\000\014\015\uffe7\040\uffe7\041\uffe7\045\uffe7\046\uffe7\001" +
    "\002\000\020\012\uffda\023\uffda\032\uffda\033\uffda\046\uffda" +
    "\047\uffda\050\uffda\001\002\000\020\012\uffd4\023\uffd4\032" +
    "\uffd4\033\uffd4\046\uffd4\047\uffd4\050\uffd4\001\002\000\020" +
    "\012\uffdb\023\uffdb\032\uffdb\033\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\001\002\000\020\012\uffd2\023\uffd2\032\uffd2\033\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\001\002\000\020\012\uffd1\023" +
    "\uffd1\032\uffd1\033\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002" +
    "\000\020\012\uffd0\023\uffd0\032\uffd0\033\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\001\002\000\020\012\uffd3\023\uffd3\032\uffd3" +
    "\033\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000\020\012" +
    "\065\023\063\032\056\033\057\046\015\047\051\050\054" +
    "\001\002\000\020\012\uffd5\023\uffd5\032\uffd5\033\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\001\002\000\020\012\065\023\063" +
    "\032\056\033\057\046\015\047\051\050\054\001\002\000" +
    "\036\005\uffe1\006\uffe1\007\077\010\076\013\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\001\002\000\016\005\116\006\114\013\uffe3" +
    "\017\uffe3\021\uffe3\022\uffe3\001\002\000\020\012\065\023" +
    "\063\032\056\033\057\046\015\047\051\050\054\001\002" +
    "\000\010\013\132\021\070\022\072\001\002\000\004\014" +
    "\133\001\002\000\016\015\ufff8\040\ufff8\041\ufff8\043\ufff8" +
    "\044\ufff8\046\ufff8\001\002\000\016\015\uffed\040\uffed\041" +
    "\uffed\043\006\044\010\046\uffed\001\002\000\012\015\136" +
    "\040\046\041\047\046\015\001\002\000\014\015\uffea\040" +
    "\uffea\041\uffea\045\uffea\046\uffea\001\002\000\004\015\ufffb" +
    "\001\002\000\020\012\065\013\ufff1\032\056\033\057\046" +
    "\015\047\051\050\054\001\002\000\020\012\065\023\063" +
    "\032\056\033\057\046\015\047\051\050\054\001\002\000" +
    "\036\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012\140\017\uffc8" +
    "\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\001\002\000\010\017\146\021\070\022\072" +
    "\001\002\000\004\017\145\001\002\000\014\015\uffe9\040" +
    "\uffe9\041\uffe9\045\uffe9\046\uffe9\001\002\000\014\015\uffec" +
    "\040\uffec\041\uffec\045\uffec\046\uffec\001\002\000\006\013" +
    "\ufff2\020\153\001\002\000\006\013\uffef\020\uffef\001\002" +
    "\000\004\013\152\001\002\000\004\017\ufffc\001\002\000" +
    "\016\012\065\032\056\033\057\046\015\047\051\050\054" +
    "\001\002\000\006\013\ufff0\020\ufff0\001\002\000\014\015" +
    "\uffe8\040\uffe8\041\uffe8\045\uffe8\046\uffe8\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\012\034\032\035\026\036" +
    "\031\037\030\001\002\000\006\013\ufff3\017\ufff3\001\002" +
    "\000\004\016\162\001\002\000\012\034\032\035\026\036" +
    "\031\037\030\001\002\000\004\017\164\001\002\000\024" +
    "\002\ufff7\004\ufff7\015\ufff7\040\ufff7\041\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\003\007\004\001\001\000\002\001" +
    "\001\000\010\003\010\010\011\031\006\001\001\000\002" +
    "\001\001\000\004\034\160\001\001\000\002\001\001\000" +
    "\004\004\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\020\012\021\034\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\023\001\001\000\002\001\001\000\004\032\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\034\001\001\000\002\001\001\000\004\007\036\001" +
    "\001\000\010\010\011\015\037\031\006\001\001\000\012" +
    "\005\041\006\040\016\044\034\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\136" +
    "\034\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\057\021\063\022\052\023\060" +
    "\024\051\033\061\034\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\124\030\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\070\001\001\000\004\026\074\001\001" +
    "\000\002\001\001\000\010\024\073\033\061\034\054\001" +
    "\001\000\002\001\001\000\020\020\065\021\063\022\052" +
    "\023\060\024\051\033\061\034\054\001\001\000\004\027" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\072\022\052\023\060\024\051\033\061\034\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\077\033\061\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\102\001\001\000\010\010\011\015\103\031" +
    "\006\001\001\000\010\005\041\016\044\034\042\001\001" +
    "\000\004\017\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\110\001\001\000\010\010\011\015\111" +
    "\031\006\001\001\000\010\005\041\016\044\034\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\126\023\060" +
    "\024\051\033\061\034\054\001\001\000\002\001\001\000" +
    "\012\023\125\024\051\033\061\034\054\001\001\000\004" +
    "\026\074\001\001\000\004\025\124\001\001\000\020\020" +
    "\130\021\063\022\052\023\060\024\051\033\061\034\054" +
    "\001\001\000\004\027\070\001\001\000\002\001\001\000" +
    "\004\007\133\001\001\000\010\010\011\015\134\031\006" +
    "\001\001\000\010\005\041\016\044\034\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\150\014\146" +
    "\033\147\034\054\001\001\000\022\005\143\020\142\021" +
    "\063\022\052\023\060\024\051\033\061\034\141\001\001" +
    "\000\002\001\001\000\004\027\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\153\034\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decls Functions 
            {
              SymbolProgram RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDecls v1 = (SymbolDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFunctions v2 = (SymbolFunctions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolProgram(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolProgram start_val = (SymbolProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Functions ::= Functions Function 
            {
              SymbolFunctions RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunctions v1 = (SymbolFunctions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFunction v2 = (SymbolFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFunctions(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Functions ::= 
            {
              SymbolFunctions RESULT =null;
		 RESULT = new SymbolFunctions(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Function ::= FUN Id LPAREN Argsdec RPAREN COLON Basic LBRACKET Decls Statments Rtnpart RBRACKET 
            {
              SymbolFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolArgsdec v1 = (SymbolArgsdec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolBasic v2 = (SymbolBasic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolDecls v3 = (SymbolDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolStatments v4 = (SymbolStatments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolRtnpart v5 = (SymbolRtnpart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunction(id, v1, v2, v3, v4, v5); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functioncall ::= Id LPAREN Args RPAREN 
            {
              SymbolFunctioncall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArgs v1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunctioncall(id, v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functioncall",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Rtnpart ::= RETURN Factor 
            {
              SymbolRtnpart RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFactor v1 = (SymbolFactor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRtnpart(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rtnpart",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Rtnpart ::= 
            {
              SymbolRtnpart RESULT =null;
		 RESULT = new SymbolRtnpart(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rtnpart",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decls ::= Decls Decl 
            {
              SymbolDecls RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDecls v1 = (SymbolDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecl v2 = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecls(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decls ::= 
            {
              SymbolDecls RESULT =null;
		 RESULT = new SymbolDecls(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= Type Id COLON Basic SEMICOLON 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolType v1 = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBasic v2 = (SymbolBasic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecl(v1, id, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Argsdec ::= Largsdec 
            {
              SymbolArgsdec RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLargsdec v1 = (SymbolLargsdec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgsdec(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Argsdec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Argsdec ::= 
            {
              SymbolArgsdec RESULT =null;
		 RESULT = new SymbolArgsdec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Argsdec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Largsdec ::= Largsdec SEMICOLON Id COLON Basic 
            {
              SymbolLargsdec RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolLargsdec v1 = (SymbolLargsdec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBasic v2 = (SymbolBasic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLargsdec(v1, id, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Largsdec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Largsdec ::= Id COLON Basic 
            {
              SymbolLargsdec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBasic v1 = (SymbolBasic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLargsdec(id, v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Largsdec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Args ::= Largs 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLargs v1 = (SymbolLargs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArgs(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Args ::= 
            {
              SymbolArgs RESULT =null;
		 RESULT = new SymbolArgs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Largs ::= Largs COMMA Factor 
            {
              SymbolLargs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolLargs v1 = (SymbolLargs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFactor v2 = (SymbolFactor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLargs(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Largs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Largs ::= Factor 
            {
              SymbolLargs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFactor v1 = (SymbolFactor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLargs(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Largs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statments ::= Statments Statment 
            {
              SymbolStatments RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatments v1 = (SymbolStatments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatment v2 = (SymbolStatment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolStatments(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statments",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statments ::= 
            {
              SymbolStatments RESULT =null;
		 RESULT = new SymbolStatments(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statments",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statment ::= Id ASSIGN Bool SEMICOLON 
            {
              SymbolStatment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBool v1 = (SymbolBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolStatment(id, v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statment ::= IF LPAREN Bool RPAREN LBRACKET Decls Statments RBRACKET Elsepart 
            {
              SymbolStatment RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolBool v1 = (SymbolBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolDecls v2 = (SymbolDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolStatments v3 = (SymbolStatments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolElsepart v4 = (SymbolElsepart)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolStatment(v1, v2, v3, v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statment ::= WHILE LPAREN Bool RPAREN LBRACKET Decls Statments RBRACKET 
            {
              SymbolStatment RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolBool v1 = (SymbolBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDecls v2 = (SymbolDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatments v3 = (SymbolStatments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolStatment(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statment ::= Id ASSIGN Functioncall SEMICOLON 
            {
              SymbolStatment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunctioncall v1 = (SymbolFunctioncall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolStatment(id ,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statment ::= Functioncall SEMICOLON 
            {
              SymbolStatment RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunctioncall v1 = (SymbolFunctioncall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolStatment(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Elsepart ::= ELSE LBRACKET Decls Statments RBRACKET 
            {
              SymbolElsepart RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDecls v1 = (SymbolDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatments v2 = (SymbolStatments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElsepart(v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elsepart",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Elsepart ::= 
            {
              SymbolElsepart RESULT =null;
		 RESULT = new SymbolElsepart(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elsepart",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bool ::= Bool Join Relation 
            {
              SymbolBool RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolBool v1 = (SymbolBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolJoin v2 = (SymbolJoin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolRelation v3 = (SymbolRelation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBool(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bool ::= Relation 
            {
              SymbolBool RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolRelation v1 = (SymbolRelation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBool(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Relation ::= Expr Oprel Expr 
            {
              SymbolRelation RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpr v1 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOprel v2 = (SymbolOprel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v3 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRelation(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relation",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Relation ::= Expr 
            {
              SymbolRelation RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpr v1 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRelation(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relation",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= Expr Add Term 
            {
              SymbolExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpr v1 = (SymbolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAdd v2 = (SymbolAdd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerm v3 = (SymbolTerm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpr(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= Term 
            {
              SymbolExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerm v1 = (SymbolTerm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpr(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Term ::= Term Mult Unary 
            {
              SymbolTerm RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTerm v1 = (SymbolTerm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMult v2 = (SymbolMult)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolUnary v3 = (SymbolUnary)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerm(v1, v2, v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= Unary 
            {
              SymbolTerm RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolUnary v1 = (SymbolUnary)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerm(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Unary ::= NOT Unary 
            {
              SymbolUnary RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolUnary v1 = (SymbolUnary)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnary(ParserSym.NOT, v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Unary ::= Factor 
            {
              SymbolUnary RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFactor v1 = (SymbolFactor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnary(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unary",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Add ::= PLUS 
            {
              SymbolAdd RESULT =null;
		 RESULT = new SymbolAdd(ParserSym.PLUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Add",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Add ::= MINUS 
            {
              SymbolAdd RESULT =null;
		 RESULT = new SymbolAdd(ParserSym.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Add",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Mult ::= MULTI 
            {
              SymbolMult RESULT =null;
		 RESULT = new SymbolMult(ParserSym.MULTI); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mult",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Mult ::= DIV 
            {
              SymbolMult RESULT =null;
		 RESULT = new SymbolMult(ParserSym.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mult",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Join ::= OR 
            {
              SymbolJoin RESULT =null;
		 RESULT = new SymbolJoin(ParserSym.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Join",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Join ::= AND 
            {
              SymbolJoin RESULT =null;
		 RESULT = new SymbolJoin(ParserSym.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Join",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Oprel ::= EQUALS 
            {
              SymbolOprel RESULT =null;
		 RESULT = new SymbolOprel(ParserSym.EQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Oprel",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Oprel ::= NOTEQUALS 
            {
              SymbolOprel RESULT =null;
		 RESULT = new SymbolOprel(ParserSym.NOTEQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Oprel",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Oprel ::= LESSTHAN 
            {
              SymbolOprel RESULT =null;
		 RESULT = new SymbolOprel(ParserSym.LESSTHAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Oprel",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Oprel ::= LESSOREQUALS 
            {
              SymbolOprel RESULT =null;
		 RESULT = new SymbolOprel(ParserSym.LESSOREQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Oprel",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Oprel ::= GREATERTHAN 
            {
              SymbolOprel RESULT =null;
		 RESULT = new SymbolOprel(ParserSym.GREATERTHAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Oprel",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Oprel ::= GREATEROREQUALS 
            {
              SymbolOprel RESULT =null;
		 RESULT = new SymbolOprel(ParserSym.GREATEROREQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Oprel",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= VAR 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.VAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= VAL 
            {
              SymbolType RESULT =null;
		 RESULT = new SymbolType(ParserSym.VAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Basic ::= INT 
            {
              SymbolBasic RESULT =null;
		 RESULT = new SymbolBasic(ParserSym.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Basic",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Basic ::= STRING 
            {
              SymbolBasic RESULT =null;
		 RESULT = new SymbolBasic(ParserSym.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Basic",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Basic ::= BOOLEAN 
            {
              SymbolBasic RESULT =null;
		 RESULT = new SymbolBasic(ParserSym.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Basic",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Basic ::= NONE 
            {
              SymbolBasic RESULT =null;
		 RESULT = new SymbolBasic(ParserSym.NONE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Basic",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= LPAREN Bool RPAREN 
            {
              SymbolFactor RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBool v1 = (SymbolBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFactor(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= Id 
            {
              SymbolFactor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolId id = (SymbolId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFactor(ParserSym.ID, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= LITERAL 
            {
              SymbolFactor RESULT =null;
		 RESULT = new SymbolFactor(ParserSym.LITERAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Factor ::= NUM 
            {
              SymbolFactor RESULT =null;
		 RESULT = new SymbolFactor(ParserSym.NUM); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Factor ::= TRUE 
            {
              SymbolFactor RESULT =null;
		 RESULT = new SymbolFactor(ParserSym.TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Factor ::= FALSE 
            {
              SymbolFactor RESULT =null;
		 RESULT = new SymbolFactor(ParserSym.FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Id ::= ID 
            {
              SymbolId RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolId(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Id",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
