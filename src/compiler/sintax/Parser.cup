package compiler.sintax;

import java.util.*;
import java_cup.runtime.*;
import compiler.sintax.symbols.*;

class Parser;

/* Terminals (tokens returned by the scanner) */

//Funcion: fun
terminal FUN;

// OPeradores: + - * /
terminal PLUS, MINUS, MULTI, DIV;

// Asignacion: =
terminal ASSIGN;

//Delimitadores: ( ) { } : ; ,
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, COLON, SEMICOLON, COMMA;

//Operaciones booleanas: && || !
terminal AND, OR, NOT;

// Operadores relacionales: == != < <= => >
terminal EQUALS, NOTEQUALS, LESSTHAN, LESSOREQUALS, GREATEROREQUALS, GREATERTHAN;

// Tipos booleanos: true false
terminal TRUE, FALSE;

//Tipos básicos int string boolean none
terminal INT, STRING, BOOLEAN, NONE;

// Bucle y condicionales: while if else
terminal WHILE, IF, ELSE;

//Variables y constantes: var val
terminal VAR, VAL;

// Return: return
terminal RETURN;

//Tokens con valores: ID -> [a-zA-Z_][0-9a-zA-Z_]* NUM -> [0-9]+ LITERAL -> " " ó ' '
terminal String ID, NUM, LITERAL;

/* Non terminals */
nonterminal SymbolProgram Program;
nonterminal SymbolFunctions Functions;
nonterminal SymbolFunction Function;
nonterminal SymbolFunctioncall Functioncall;
nonterminal SymbolRtnpart Rtnpart;
nonterminal SymbolDecls Decls;
nonterminal SymbolDecl Decl;

nonterminal SymbolArgsdec Argsdec;
nonterminal SymbolLargsdec Largsdec;

nonterminal SymbolArgs Args;
nonterminal SymbolLargs Largs;

nonterminal SymbolStatments Statments;
nonterminal SymbolStatment Statment;
nonterminal SymbolElsepart Elsepart;
nonterminal SymbolBool Bool;
nonterminal SymbolRelation Relation;
nonterminal SymbolExpr Expr;
nonterminal SymbolTerm Term;
nonterminal SymbolUnary Unary;
nonterminal SymbolAdd Add;
nonterminal SymbolMult Mult;
nonterminal SymbolJoin Join;
nonterminal SymbolOprel Oprel;
nonterminal SymbolType Type;
nonterminal SymbolBasic Basic;
nonterminal SymbolFactor Factor;
nonterminal SymbolId Id;


/* Precedence declarations */
// ¿Hace falta?

/* Productions */

Program ::= Decls:v1 Functions:v2
              {: RESULT = new SymbolProgram(v1, v2); :};

Functions ::= Functions:v1 Function:v2
              {: RESULT = new SymbolFunctions(v1, v2); :}
              | {: RESULT = new SymbolFunctions(); :};

Function ::= FUN Id:id LPAREN Argsdec:v1 RPAREN COLON Basic:v2 LBRACKET Decls:v3 Statments:v4 Rtnpart:v5 RBRACKET
              {: RESULT = new SymbolFunction(id, v1, v2, v3, v4, v5); :};

Functioncall ::= Id:id LPAREN Args:v1 RPAREN
              {: RESULT = new SymbolFunctioncall(id, v1); :};

Rtnpart ::= RETURN Factor:v1
              {: RESULT = new SymbolRtnpart(v1); :}
              | {: RESULT = new SymbolRtnpart(); :};

Decls ::= Decls:v1 Decl:v2
              {: RESULT = new SymbolDecls(v1, v2); :}
              | {: RESULT = new SymbolDecls(); :};

Decl ::= Type:v1 Id:id COLON Basic:v2 SEMICOLON
              {: RESULT = new SymbolDecl(id, v1, v2); :};

Argsdec ::= Largsdec:v1
              {: RESULT = new SymbolArgsdec(v1); :}
              | {: RESULT = new SymbolArgsdec(); :};

Largsdec ::= Largsdec:v1 SEMICOLON Id:id COLON Basic:v2
              {: RESULT = new SymbolLargsdec(v1, id, v2); :}
        | Id:id COLON Basic:v1
              {: RESULT = new SymbolLargsdec(id, v1); :};

Args ::= Largs:v1
              {: RESULT = new SymbolArgs(v1); :}
            | {: RESULT = new SymbolArgs(); :};

Largs ::= Largs:v1 COMMA Factor:v2
              {: RESULT = new SymbolLargs(v1, v2); :}
           | Factor:v1
            {: RESULT = new SymbolLargs(v1); :};

Statments ::= Statments:v1 Statment:v2
              {: RESULT = new SymbolStatments(v1, v2); :}
	        | {: RESULT = new SymbolStatments(); :};

Statment ::= Id:id ASSIGN Bool:v1 SEMICOLON
              {: RESULT = new SymbolStatment(id, v1); :}
	    | IF LPAREN Bool:v1 RPAREN LBRACKET Decls:v2 Statments:v3 RBRACKET Elsepart:v4
              {: RESULT = new SymbolStatment(v1, v2, v3, v4); :}
	    | WHILE LPAREN Bool:v1 RPAREN LBRACKET Decls:v2 Statments:v3 RBRACKET
              {: RESULT = new SymbolStatment(v1, v2, v3); :}
	    | Id:id ASSIGN Functioncall:v1 SEMICOLON
              {: RESULT = new SymbolStatment(id ,v1); :}
	    | Functioncall:v1 SEMICOLON
              {: RESULT = new SymbolStatment(v1); :};

Elsepart ::= ELSE LBRACKET Decls:v1 Statments:v2 RBRACKET
              {: RESULT = new SymbolElsepart(v1, v2); :}
              | {: RESULT = new SymbolElsepart(); :};

Bool ::= Bool:v1 Join:v2 Relation:v3
              {: RESULT = new SymbolBool(v1, v2, v3); :}
	    | Relation:v1
              {: RESULT = new SymbolBool(v1); :};

Relation ::= Expr:v1 Oprel:v2 Expr:v3
              {: RESULT = new SymbolRelation(v1, v2, v3); :}
	    | Expr:v1
              {: RESULT = new SymbolRelation(v1); :};

Expr ::= Expr:v1 Add:v2 Term:v3
              {: RESULT = new SymbolExpr(v1, v2, v3); :}
	    | Term:v1
              {: RESULT = new SymbolExpr(v1); :};

Term ::= Term:v1 Mult:v2 Unary:v3
              {: RESULT = new SymbolTerm(v1, v2, v3); :}
	    | Unary:v1
              {: RESULT = new SymbolTerm(v1); :};

Unary ::= NOT Unary:v1
              {: RESULT = new SymbolUnary(ParserSym.NOT, v1); :}
	    | Factor:v1
              {: RESULT = new SymbolUnary(v1); :};

Add ::= PLUS
              {: RESULT = new SymbolPlus(ParserSym.PLUS); :}
	    | MINUS
              {: RESULT = new SymbolPlus(ParserSym.MINUS); :};

Mult ::= MULTI
              {: RESULT = new SymbolMult(ParserSym.MULTI); :}
	    | DIV
              {: RESULT = new SymbolMult(ParserSym.DIV); :};

Join ::= OR
              {: RESULT = new SymbolJoin(ParserSym.OR); :}
	    | AND
              {: RESULT = new SymbolJoin(ParserSym.AND); :};

Oprel ::= EQUALS
              {: RESULT = new SymbolOprel(ParserSym.EQUALS); :}
	    | NOTEQUALS
              {: RESULT = new SymbolOprel(ParserSym.NOTEQUALS); :}
	    | LESSTHAN
              {: RESULT = new SymbolOprel(ParserSym.LESSTHAN); :}
	    | LESSOREQUALS
              {: RESULT = new SymbolOprel(ParserSym.LESSOREQUALS); :}
	    | GREATERTHAN
              {: RESULT = new SymbolOprel(ParserSym.GREATERTHAN); :}
	    | GREATEROREQUALS
              {: RESULT = new SymbolOprel(ParserSym.GREATEROREQUALS); :};

Type ::= VAR
              {: RESULT = new SymbolType(ParserSym.VAR); :}
	    | VAL
              {: RESULT = new SymbolType(ParserSym.VAL); :};

Basic ::= INT
              {: RESULT = new SymbolBasic(ParserSym.INT); :}
	    | STRING
              {: RESULT = new SymbolBasic(ParserSym.STRING); :}
	    | BOOLEAN
              {: RESULT = new SymbolBasic(ParserSym.BOOLEAN); :}
	    | NONE
              {: RESULT = new SymbolBasic(ParserSym.NONE); :};

Factor ::= LPAREN Bool:v1 RPAREN
              {: RESULT = new SymbolFactor(v1); :}
	    | Id:id
              {: RESULT = new SymbolFactor(ParserSym.ID, id); :}
	    | LITERAL
              {: RESULT = new SymbolFactor(ParserSym.LITERAL); :}
	    | NUM
              {: RESULT = new SymbolFactor(ParserSym.NUM); :}
	    | TRUE
              {: RESULT = new SymbolFactor(ParserSym.TRUE); :}
	    | FALSE
              {: RESULT = new SymbolFactor(ParserSym.FALSE); :};

Id ::= ID:id
                 {: RESULT = new SymbolId(id, idleft); :};