package compiler.syntax;

import compiler.syntax.symbols.*;

import compiler.lexic.Lexer;
import java_cup.runtime.ComplexSymbolFactory;

import java.io.FileNotFoundException;
import java.io.PrintWriter;

class Parser;

parser code {:
    Lexer lexer;

    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
        lexer = lex;
    }
:};

/* Terminals (tokens returned by the scanner) */

//Funcion: fun
terminal FUN;

// OPeradores: + - * /
terminal PLUS, MINUS, MULTI, DIV;

// Asignacion: =
terminal ASSIGN;

//Delimitadores: ( ) { } : ; ,
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, COLON, SEMICOLON, COMMA;

//Operaciones booleanas: && || !
terminal AND, OR, NOT;

// Operadores relacionales: == != < <= => >
terminal EQU, NOTEQU, LT, LTEQU, GT, GTEQU;

// Tipos booleanos: true false
terminal TRUE, FALSE;

//Tipos básicos int string boolean none
terminal INT, STRING, BOOLEAN, NONE;

// Bucle y condicionales: while if else
terminal WHILE, IF, ELSE;

//Función de entrada y salida
terminal GET, PRINT;

//Variables y constantes: var val
terminal VAR, VAL;

// Return: return
terminal RETURN;

//Tokens con valores: ID -> [a-zA-Z_][0-9a-zA-Z_]* NUM -> [0-9]+ LITERAL -> " " ó ' '
terminal String ID, NUM, LITERAL;

/* Non terminals */
nonterminal SymbolProgram Program;
nonterminal SymbolFunctions Functions;
nonterminal SymbolFunction Function;
nonterminal SymbolFunctioncall Functioncall;
nonterminal SymbolRtnpart Rtnpart;
nonterminal SymbolDecls Decls;
nonterminal SymbolDecl Decl;

nonterminal SymbolArgsdec Argsdec;
nonterminal SymbolLargsdec Largsdec;

nonterminal SymbolArgs Args;
nonterminal SymbolLargs Largs;

nonterminal SymbolStatments Statments;
nonterminal SymbolStatment Statment;
nonterminal SymbolElsepart Elsepart;
nonterminal SymbolCond Cond;
nonterminal SymbolBool Bool;
nonterminal SymbolRelation Relation;
nonterminal SymbolExpr Expr;
nonterminal SymbolTerm Term;
nonterminal SymbolUnary Unary;
nonterminal SymbolAdd Add;
nonterminal SymbolMult Mult;
nonterminal SymbolJoin Join;
nonterminal SymbolOprel Oprel;
nonterminal SymbolType Type;
nonterminal SymbolBasic Basic;
nonterminal SymbolFactor Factor;
nonterminal SymbolId Id;
nonterminal SymbolAup Aup;
nonterminal SymbolAdown Adown;
nonterminal SymbolFuncstart Funcstart;
nonterminal SymbolLoopstart Loopstart;
nonterminal SymbolLoopend Loopend;
nonterminal SymbolCondstart Condstart;
nonterminal SymbolCondelse Condelse;
nonterminal SymbolCondend Condend;


/* Precedence declarations */
precedence left  PLUS, MINUS;
precedence left  MULTI, DIV;

/* Productions */

start with Program;

Program ::= Decls:v1 Functions:v2     {: RESULT = new SymbolProgram(v1, v2); :};

Functions ::= Functions:v1 Function:v2
              {: RESULT = new SymbolFunctions(v1, v2); :}
              | {: RESULT = new SymbolFunctions(); :};

Function ::= FUN Id:id Funcstart Aup LPAREN Argsdec:v1 RPAREN COLON Basic:v2 LBRACKET Decls:v3 Statments:v4 Rtnpart:v5 Adown RBRACKET
              {: RESULT = new SymbolFunction(id, v1, v2, v3, v4, v5, lexer.getRow(), lexer.getCol()); :};

Functioncall ::= Id:id LPAREN Args:v1 RPAREN
              {: RESULT = new SymbolFunctioncall(id, v1, lexer.getRow(), lexer.getCol()); :};

Rtnpart ::= RETURN Factor:v1 SEMICOLON
              {: RESULT = new SymbolRtnpart(v1); :}
              | {: RESULT = new SymbolRtnpart(); :};

Decls ::= Decls:v1 Decl:v2
              {: RESULT = new SymbolDecls(v1, v2); :}
              | {: RESULT = new SymbolDecls(); :};

Decl ::= Type:v1 Id:id COLON Basic:v2 SEMICOLON
                {: RESULT = new SymbolDecl(v1, id, v2, lexer.getRow(), lexer.getCol()); :}
              | Type:v1 Id:id COLON Basic:v2 ASSIGN Bool:v3 SEMICOLON
                {: RESULT = new SymbolDecl(v1, id, v2, v3, lexer.getRow(), lexer.getCol()); :};

Argsdec ::= Largsdec:v1
              {: RESULT = new SymbolArgsdec(v1); :}
              | {: RESULT = new SymbolArgsdec(); :};

Largsdec ::= Largsdec:v1 SEMICOLON Id:id COLON Basic:v2
              {: RESULT = new SymbolLargsdec(v1, id, v2, lexer.getRow(), lexer.getCol()); :}
        | Id:id COLON Basic:v1
              {: RESULT = new SymbolLargsdec(id, v1, lexer.getRow(), lexer.getCol()); :};

Args ::= Largs:v1
              {: RESULT = new SymbolArgs(v1); :}
            | {: RESULT = new SymbolArgs(); :};

Largs ::= Largs:v1 COMMA Factor:v2
              {: RESULT = new SymbolLargs(v1, v2); :}
           | Factor:v1
            {: RESULT = new SymbolLargs(v1); :};

Statments ::= Statments:v1 Statment:v2
              {: RESULT = new SymbolStatments(v1, v2); :}
	        | {: RESULT = new SymbolStatments(); :};

Statment ::= Id:id ASSIGN Bool:v1 SEMICOLON
              {: RESULT = new SymbolStatment(id, v1, lexer.getRow(), lexer.getCol()); :}
	    | Condstart IF LPAREN Cond:v1 RPAREN LBRACKET Aup Decls:v2 Statments:v3 Adown RBRACKET Elsepart:v4
              {: RESULT = new SymbolStatment(v1, v2, v3, v4, lexer.getRow(), lexer.getCol()); :}
	    | Loopstart WHILE LPAREN Cond:v1 RPAREN LBRACKET Aup Decls:v2 Statments:v3 Adown RBRACKET Loopend
              {: RESULT = new SymbolStatment(v1, v2, v3, lexer.getRow(), lexer.getCol()); :}
	    | Id:id ASSIGN Functioncall:v1 SEMICOLON
              {: RESULT = new SymbolStatment(id ,v1, lexer.getRow(), lexer.getCol()); :}
	    | Functioncall:v1 SEMICOLON
              {: RESULT = new SymbolStatment(v1); :}
	    | Id:id ASSIGN GET LPAREN RPAREN SEMICOLON
               {: RESULT = new SymbolStatment(id, lexer.getRow(), lexer.getCol()); :}
        | PRINT LPAREN Bool:v1 RPAREN SEMICOLON
              {: RESULT = new SymbolStatment(v1, lexer.getRow(), lexer.getCol()); :}
	    | PRINT LPAREN Bool:v1 COMMA Bool:v2 RPAREN SEMICOLON
              {: RESULT = new SymbolStatment(v1, v2, lexer.getRow(), lexer.getCol()); :};

Elsepart ::= Condelse ELSE LBRACKET Aup Decls:v1 Statments:v2 Adown RBRACKET Condend
              {: RESULT = new SymbolElsepart(v1, v2); :}
        | Condelse Condend {: RESULT = new SymbolElsepart(); :};

Cond ::= Bool:bool
              {: RESULT = new SymbolCond(bool); :};

Bool ::= Bool:v1 Join:v2 Relation:v3
              {: RESULT = new SymbolBool(v1, v2, v3, lexer.getRow(), lexer.getCol()); :}
	    | Relation:v1
              {: RESULT = new SymbolBool(v1); :};

Relation ::= Expr:v1 Oprel:v2 Expr:v3
              {: RESULT = new SymbolRelation(v1, v2, v3, lexer.getRow(), lexer.getCol()); :}
	    | Expr:v1
              {: RESULT = new SymbolRelation(v1); :};

Expr ::= Expr:v1 Add:v2 Term:v3
              {: RESULT = new SymbolExpr(v1, v2, v3, lexer.getRow(), lexer.getCol()); :}
	    | Term:v1
              {: RESULT = new SymbolExpr(v1); :};

Term ::= Term:v1 Mult:v2 Unary:v3
              {: RESULT = new SymbolTerm(v1, v2, v3, lexer.getRow(), lexer.getCol()); :}
	    | Unary:v1
              {: RESULT = new SymbolTerm(v1); :};

Unary ::= NOT Unary:v1
              {: RESULT = new SymbolUnary(ParserSym.NOT, v1, lexer.getRow(), lexer.getCol()); :}
	    | MINUS Unary:v1
              {: RESULT = new SymbolUnary(ParserSym.MINUS, v1, lexer.getRow(), lexer.getCol()); :}
	    | Factor:v1
              {: RESULT = new SymbolUnary(v1); :};

Add ::= PLUS
              {: RESULT = new SymbolAdd(ParserSym.PLUS); :}
	    | MINUS
              {: RESULT = new SymbolAdd(ParserSym.MINUS); :};

Mult ::= MULTI
              {: RESULT = new SymbolMult(ParserSym.MULTI); :}
	    | DIV
              {: RESULT = new SymbolMult(ParserSym.DIV); :};

Join ::= OR
              {: RESULT = new SymbolJoin(ParserSym.OR); :}
	    | AND
              {: RESULT = new SymbolJoin(ParserSym.AND); :};

Oprel ::= EQU
              {: RESULT = new SymbolOprel(ParserSym.EQU); :}
	    | NOTEQU
              {: RESULT = new SymbolOprel(ParserSym.NOTEQU); :}
	    | LT
              {: RESULT = new SymbolOprel(ParserSym.LT); :}
	    | LTEQU
              {: RESULT = new SymbolOprel(ParserSym.LTEQU); :}
	    | GT
              {: RESULT = new SymbolOprel(ParserSym.GT); :}
	    | GTEQU
              {: RESULT = new SymbolOprel(ParserSym.GTEQU); :};

Type ::= VAR
              {: RESULT = new SymbolType(ParserSym.VAR); :}
	    | VAL
              {: RESULT = new SymbolType(ParserSym.VAL); :};

Basic ::= INT
              {: RESULT = new SymbolBasic(ParserSym.INT); :}
	    | STRING
              {: RESULT = new SymbolBasic(ParserSym.STRING); :}
	    | BOOLEAN
              {: RESULT = new SymbolBasic(ParserSym.BOOLEAN); :}
	    | NONE
              {: RESULT = new SymbolBasic(ParserSym.NONE); :};

Factor ::= LPAREN Bool:v1 RPAREN
              {: RESULT = new SymbolFactor(v1); :}
	    | Id:id
              {: RESULT = new SymbolFactor(id, lexer.getRow(), lexer.getCol()); :}
	    | LITERAL:literal
              {: RESULT = new SymbolFactor(ParserSym.LITERAL, literal); :}
	    | NUM:literal
              {: RESULT = new SymbolFactor(ParserSym.NUM, literal); :}
	    | TRUE
              {: RESULT = new SymbolFactor(ParserSym.TRUE); :}
	    | FALSE
              {: RESULT = new SymbolFactor(ParserSym.FALSE); :};

Id ::= ID:id
                 {: RESULT = new SymbolId(id); :};

Aup ::=         {: RESULT = new SymbolAup(); :};
Adown ::=         {: RESULT = new SymbolAdown(); :};

Funcstart ::=         {: RESULT = new SymbolFuncstart(); :};
Loopstart ::=         {: RESULT = new SymbolLoopstart(); :};
Loopend ::=         {: RESULT = new SymbolLoopend(); :};
Condstart ::=         {: RESULT = new SymbolCondstart(); :};
Condelse ::=         {: RESULT = new SymbolCondelse(); :};
Condend ::=         {: RESULT = new SymbolCondend(); :};